
Graduation_Project_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002264  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023ac  080023ac  000123b4  2**0
                  CONTENTS
  4 .ARM          00000000  080023ac  080023ac  000123b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023ac  080023b4  000123b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000123b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000000  080023b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080023b4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000123b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b870  00000000  00000000  000123dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c77  00000000  00000000  0001dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001f6c  00000000  00000000  0001f8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004b8  00000000  00000000  00021830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003d0  00000000  00000000  00021ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000044bb  00000000  00000000  000220b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000059b2  00000000  00000000  00026573  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000df0e  00000000  00000000  0002bf25  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00039e33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001148  00000000  00000000  00039eb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800237c 	.word	0x0800237c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800237c 	.word	0x0800237c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	d1ed      	bne.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_f2uiz>:
 8000bc8:	0042      	lsls	r2, r0, #1
 8000bca:	d20e      	bcs.n	8000bea <__aeabi_f2uiz+0x22>
 8000bcc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bd0:	d30b      	bcc.n	8000bea <__aeabi_f2uiz+0x22>
 8000bd2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bd6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bda:	d409      	bmi.n	8000bf0 <__aeabi_f2uiz+0x28>
 8000bdc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be4:	fa23 f002 	lsr.w	r0, r3, r2
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr
 8000bf0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bf4:	d101      	bne.n	8000bfa <__aeabi_f2uiz+0x32>
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	d102      	bne.n	8000c00 <__aeabi_f2uiz+0x38>
 8000bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <HAL_Buzzer_Init>:


#include "BUZZER.h"

GPIO_PinConfig_t Buz_CFG;
void HAL_Buzzer_Init(void){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	Buz_CFG.GPIO_PinNumber = Buzzer_Pin;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <HAL_Buzzer_Init+0x24>)
 8000c0e:	2240      	movs	r2, #64	; 0x40
 8000c10:	801a      	strh	r2, [r3, #0]
	Buz_CFG.GPIO_Output_Speed  = GPIO_Output_Speed_2M;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_Buzzer_Init+0x24>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	70da      	strb	r2, [r3, #3]
	Buz_CFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_Buzzer_Init+0x24>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(Buzzer_Port, &Buz_CFG);
 8000c1e:	4903      	ldr	r1, [pc, #12]	; (8000c2c <HAL_Buzzer_Init+0x24>)
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <HAL_Buzzer_Init+0x28>)
 8000c22:	f000 fba2 	bl	800136a <MCAL_GPIO_Init>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000007c 	.word	0x2000007c
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <HAL_Buzzer_ON>:
void HAL_Buzzer_ON (void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(Buzzer_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2140      	movs	r1, #64	; 0x40
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <HAL_Buzzer_ON+0x14>)
 8000c3e:	f000 fc2a 	bl	8001496 <MCAL_GPIO_WritePin>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <HAL_Buzzer_OFF>:
void HAL_Buzzer_OFF (void){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(Buzzer_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <HAL_Buzzer_OFF+0x14>)
 8000c56:	f000 fc1e 	bl	8001496 <MCAL_GPIO_WritePin>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40010c00 	.word	0x40010c00

08000c64 <HAL_Motor1_init>:


#include "DC.h"
#include "Timer.h"

void HAL_Motor1_init(GPIO_TypeDef *GPIOx,uint8_t PIN1 , uint8_t PIN2 ){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
 8000c70:	4613      	mov	r3, r2
 8000c72:	70bb      	strb	r3, [r7, #2]

	GPIO_PinConfig_t X;
	X.GPIO_PinNumber = PIN1;
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	81bb      	strh	r3, [r7, #12]
	X.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	73bb      	strb	r3, [r7, #14]
	X.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_Init(GPIOx, &X);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 fb6e 	bl	800136a <MCAL_GPIO_Init>

	X.GPIO_PinNumber = PIN2;
 8000c8e:	78bb      	ldrb	r3, [r7, #2]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	81bb      	strh	r3, [r7, #12]
	X.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000c94:	2304      	movs	r3, #4
 8000c96:	73bb      	strb	r3, [r7, #14]
	X.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_Init(GPIOx, &X);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fb61 	bl	800136a <MCAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_Motor2_init>:

void HAL_Motor2_init(GPIO_TypeDef *GPIOx,uint8_t PIN3 , uint8_t PIN4 ){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	70bb      	strb	r3, [r7, #2]

	GPIO_PinConfig_t X;
	X.GPIO_PinNumber = PIN3;
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	81bb      	strh	r3, [r7, #12]
	X.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	73bb      	strb	r3, [r7, #14]
	X.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_Init(GPIOx, &X);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 fb48 	bl	800136a <MCAL_GPIO_Init>

	X.GPIO_PinNumber = PIN4;
 8000cda:	78bb      	ldrb	r3, [r7, #2]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	81bb      	strh	r3, [r7, #12]
	X.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	73bb      	strb	r3, [r7, #14]
	X.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_Init(GPIOx, &X);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4619      	mov	r1, r3
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 fb3b 	bl	800136a <MCAL_GPIO_Init>

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_Motor_Stop>:



void HAL_Motor_Stop(uint8_t motor){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	if (motor == motor_1){
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d10a      	bne.n	8000d22 <HAL_Motor_Stop+0x26>
		MCAL_GPIO_WritePin(Motor_PORT_M1, Motor_PIN1, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2101      	movs	r1, #1
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <HAL_Motor_Stop+0x48>)
 8000d12:	f000 fbc0 	bl	8001496 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Motor_PORT_M1, Motor_PIN2, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	480a      	ldr	r0, [pc, #40]	; (8000d44 <HAL_Motor_Stop+0x48>)
 8000d1c:	f000 fbbb 	bl	8001496 <MCAL_GPIO_WritePin>
	else if (motor == motor_2){
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN3, GPIO_PIN_RESET);
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN4, GPIO_PIN_RESET);

	}
}
 8000d20:	e00c      	b.n	8000d3c <HAL_Motor_Stop+0x40>
	else if (motor == motor_2){
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d109      	bne.n	8000d3c <HAL_Motor_Stop+0x40>
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN3, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_Motor_Stop+0x48>)
 8000d2e:	f000 fbb2 	bl	8001496 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN4, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2110      	movs	r1, #16
 8000d36:	4803      	ldr	r0, [pc, #12]	; (8000d44 <HAL_Motor_Stop+0x48>)
 8000d38:	f000 fbad 	bl	8001496 <MCAL_GPIO_WritePin>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <HAL_Motor1_Direction>:


void HAL_Motor1_Direction(uint8_t direction)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	switch (direction){
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d002      	beq.n	8000d5e <HAL_Motor1_Direction+0x16>
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d00b      	beq.n	8000d74 <HAL_Motor1_Direction+0x2c>
 8000d5c:	e015      	b.n	8000d8a <HAL_Motor1_Direction+0x42>
	case forward:{
		// Forward
		MCAL_GPIO_WritePin(Motor_PORT_M1, Motor_PIN1, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <HAL_Motor1_Direction+0x60>)
 8000d64:	f000 fb97 	bl	8001496 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Motor_PORT_M1, Motor_PIN2, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	480e      	ldr	r0, [pc, #56]	; (8000da8 <HAL_Motor1_Direction+0x60>)
 8000d6e:	f000 fb92 	bl	8001496 <MCAL_GPIO_WritePin>
	}
	break;
 8000d72:	e015      	b.n	8000da0 <HAL_Motor1_Direction+0x58>
	case backward:{
		// Backward
		MCAL_GPIO_WritePin(Motor_PORT_M1, Motor_PIN1, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2101      	movs	r1, #1
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <HAL_Motor1_Direction+0x60>)
 8000d7a:	f000 fb8c 	bl	8001496 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Motor_PORT_M1, Motor_PIN2, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2102      	movs	r1, #2
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <HAL_Motor1_Direction+0x60>)
 8000d84:	f000 fb87 	bl	8001496 <MCAL_GPIO_WritePin>
	}
	break;
 8000d88:	e00a      	b.n	8000da0 <HAL_Motor1_Direction+0x58>
	default:{
		MCAL_GPIO_WritePin(Motor_PORT_M1, Motor_PIN1, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <HAL_Motor1_Direction+0x60>)
 8000d90:	f000 fb81 	bl	8001496 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Motor_PORT_M1, Motor_PIN2, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2102      	movs	r1, #2
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <HAL_Motor1_Direction+0x60>)
 8000d9a:	f000 fb7c 	bl	8001496 <MCAL_GPIO_WritePin>

	}
	break;
 8000d9e:	bf00      	nop
	}

}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40010c00 	.word	0x40010c00

08000dac <HAL_Motor2_Direction>:


void HAL_Motor2_Direction(uint8_t direction)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	switch (direction){
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d002      	beq.n	8000dc2 <HAL_Motor2_Direction+0x16>
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d00b      	beq.n	8000dd8 <HAL_Motor2_Direction+0x2c>
 8000dc0:	e015      	b.n	8000dee <HAL_Motor2_Direction+0x42>
	case forward:{
		// Forward
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN3, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4811      	ldr	r0, [pc, #68]	; (8000e0c <HAL_Motor2_Direction+0x60>)
 8000dc8:	f000 fb65 	bl	8001496 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN4, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2110      	movs	r1, #16
 8000dd0:	480e      	ldr	r0, [pc, #56]	; (8000e0c <HAL_Motor2_Direction+0x60>)
 8000dd2:	f000 fb60 	bl	8001496 <MCAL_GPIO_WritePin>
	}
	break;
 8000dd6:	e015      	b.n	8000e04 <HAL_Motor2_Direction+0x58>
	case backward:{
		// Backward
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN3, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <HAL_Motor2_Direction+0x60>)
 8000dde:	f000 fb5a 	bl	8001496 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN4, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2110      	movs	r1, #16
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <HAL_Motor2_Direction+0x60>)
 8000de8:	f000 fb55 	bl	8001496 <MCAL_GPIO_WritePin>
	}
	break;
 8000dec:	e00a      	b.n	8000e04 <HAL_Motor2_Direction+0x58>
	default:{
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN3, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2108      	movs	r1, #8
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <HAL_Motor2_Direction+0x60>)
 8000df4:	f000 fb4f 	bl	8001496 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Motor_PORT_M2, Motor_PIN4, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <HAL_Motor2_Direction+0x60>)
 8000dfe:	f000 fb4a 	bl	8001496 <MCAL_GPIO_WritePin>

	}
	break;
 8000e02:	bf00      	nop
	}

}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010c00 	.word	0x40010c00

08000e10 <HAL_Speed_Motor>:
Channel 4: PA11
*/



void HAL_Speed_Motor (uint32_t speed){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t x;
	x.GPIO_PinNumber = motor_Enable;
 8000e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1c:	81bb      	strh	r3, [r7, #12]
	x.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	73bb      	strb	r3, [r7, #14]
	x.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_Init(GPIOA, &x);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_Speed_Motor+0x44>)
 8000e2e:	f000 fa9c 	bl	800136a <MCAL_GPIO_Init>
	Timer1_PWM1_Set_Value((speed *50000 )/100);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e38:	fb02 f303 	mul.w	r3, r2, r3
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_Speed_Motor+0x48>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fe57 	bl	8001af8 <Timer1_PWM1_Set_Value>

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800
 8000e58:	51eb851f 	.word	0x51eb851f

08000e5c <HAL_LDR_Init>:

#include "LDR.h"



void HAL_LDR_Init (void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	MCAL_ADC_init();
 8000e60:	f000 f8a4 	bl	8000fac <MCAL_ADC_init>
	ldr_Cfg.GPIO_PinNumber = LDR_Pin;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_LDR_Init+0x20>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	801a      	strh	r2, [r3, #0]
	ldr_Cfg.GPIO_MODE = GPIO_MODE_Analog;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <HAL_LDR_Init+0x20>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LDR_Port, &ldr_Cfg);
 8000e70:	4902      	ldr	r1, [pc, #8]	; (8000e7c <HAL_LDR_Init+0x20>)
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <HAL_LDR_Init+0x24>)
 8000e74:	f000 fa79 	bl	800136a <MCAL_GPIO_Init>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000080 	.word	0x20000080
 8000e80:	40010800 	.word	0x40010800

08000e84 <HAL_LDR_Output_Value>:



uint16_t HAL_LDR_Output_Value(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	uint16_t Dout = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	80fb      	strh	r3, [r7, #6]
	Dout = MCAL_ADC_ConvertToDigital(LDR_channel);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f8d2 	bl	8001038 <MCAL_ADC_ConvertToDigital>
 8000e94:	4603      	mov	r3, r0
 8000e96:	80fb      	strh	r3, [r7, #6]
	return Dout;
 8000e98:	88fb      	ldrh	r3, [r7, #6]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <udelay>:
{
	unsigned int i , j ;
	for (i= 0 ; i<x ; i++)
		for (j= 0 ; j<255 ; j++);
}
void udelay(uint32_t us){
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	while(us--){
 8000eaa:	e008      	b.n	8000ebe <udelay+0x1c>
		for(uint32_t i=0; i< clk/4000000; i++);
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	e002      	b.n	8000eb8 <udelay+0x16>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d9f9      	bls.n	8000eb2 <udelay+0x10>
	while(us--){
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f1      	bne.n	8000eac <udelay+0xa>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	0000      	movs	r0, r0
 8000ed4:	0000      	movs	r0, r0
	...

08000ed8 <HAL_Ultrasonic_get_distance>:


float HAL_Ultrasonic_get_distance(void) {
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
	// Configure GPIO
	//RCC_GPIOA_CLK_EN() ;

	GPIO_PinConfig_t Pin_Cfg;
	// TRIG pin as output
	Pin_Cfg.GPIO_PinNumber = TRIG_PIN;
 8000ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee2:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_Output_Speed = GPIO_Output_Speed_2M;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(TRIG_PORT, &Pin_Cfg);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482d      	ldr	r0, [pc, #180]	; (8000fa8 <HAL_Ultrasonic_get_distance+0xd0>)
 8000ef2:	f000 fa3a 	bl	800136a <MCAL_GPIO_Init>
	// ECHO pin as input
	Pin_Cfg.GPIO_PinNumber = ECHO_PIN;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000efc:	2301      	movs	r3, #1
 8000efe:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(ECHO_PORT, &Pin_Cfg);
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <HAL_Ultrasonic_get_distance+0xd0>)
 8000f06:	f000 fa30 	bl	800136a <MCAL_GPIO_Init>

	// Trigger pulse

	MCAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f10:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <HAL_Ultrasonic_get_distance+0xd0>)
 8000f12:	f000 fac0 	bl	8001496 <MCAL_GPIO_WritePin>
	STK_u8SetuSBusyWait(5);
 8000f16:	2005      	movs	r0, #5
 8000f18:	f000 fc82 	bl	8001820 <STK_u8SetuSBusyWait>
	MCAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f22:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <HAL_Ultrasonic_get_distance+0xd0>)
 8000f24:	f000 fab7 	bl	8001496 <MCAL_GPIO_WritePin>
	udelay(10);
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f7ff ffba 	bl	8000ea2 <udelay>
	MCAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f34:	481c      	ldr	r0, [pc, #112]	; (8000fa8 <HAL_Ultrasonic_get_distance+0xd0>)
 8000f36:	f000 faae 	bl	8001496 <MCAL_GPIO_WritePin>

	// Wait for echo (rising edge)
	while (!MCAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN));
 8000f3a:	bf00      	nop
 8000f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f40:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <HAL_Ultrasonic_get_distance+0xd0>)
 8000f42:	f000 fa91 	bl	8001468 <MCAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f7      	beq.n	8000f3c <HAL_Ultrasonic_get_distance+0x64>

	// Measure pulse duration using delay loop
	uint32_t duration = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
	while (MCAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) {
 8000f50:	e005      	b.n	8000f5e <HAL_Ultrasonic_get_distance+0x86>
		duration++;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
		udelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff ffa2 	bl	8000ea2 <udelay>
	while (MCAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) {
 8000f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <HAL_Ultrasonic_get_distance+0xd0>)
 8000f64:	f000 fa80 	bl	8001468 <MCAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f1      	bne.n	8000f52 <HAL_Ultrasonic_get_distance+0x7a>
	}

	// Calculate distance
	float distance = (float)duration*.343;
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff fdd2 	bl	8000b18 <__aeabi_ui2f>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fa5e 	bl	8000438 <__aeabi_f2d>
 8000f7c:	a308      	add	r3, pc, #32	; (adr r3, 8000fa0 <HAL_Ultrasonic_get_distance+0xc8>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fab1 	bl	80004e8 <__aeabi_dmul>
 8000f86:	4603      	mov	r3, r0
 8000f88:	460c      	mov	r4, r1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	f7ff fcbd 	bl	800090c <__aeabi_d2f>
 8000f92:	4603      	mov	r3, r0
 8000f94:	60bb      	str	r3, [r7, #8]

	return distance;
 8000f96:	68bb      	ldr	r3, [r7, #8]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	45a1cac1 	.word	0x45a1cac1
 8000fa4:	3fd5f3b6 	.word	0x3fd5f3b6
 8000fa8:	40010800 	.word	0x40010800

08000fac <MCAL_ADC_init>:

/************************************************************************/
/*                   Functions Implementations                          */
/************************************************************************/

void MCAL_ADC_init(void) {
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
    // Enable ADC clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MCAL_ADC_init+0x60>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <MCAL_ADC_init+0x60>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6193      	str	r3, [r2, #24]

    // Power on ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MCAL_ADC_init+0x64>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MCAL_ADC_init+0x64>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6093      	str	r3, [r2, #8]

    // Set ADC prescaler
    RCC->CFGR |= RCC_CFGR_ADCPRE_DIV4;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <MCAL_ADC_init+0x60>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <MCAL_ADC_init+0x60>)
 8000fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd2:	6053      	str	r3, [r2, #4]

    // Set ADC resolution to 12-bit and right alignment
    ADC1->CR2 &= ~(ADC_CR2_ALIGN | ADC_CR2_RES);
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MCAL_ADC_init+0x64>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <MCAL_ADC_init+0x64>)
 8000fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fde:	6093      	str	r3, [r2, #8]

    // Disable injected and regular interrupts
    ADC1->CR1 &= ~(ADC_CR1_JEOCIE | ADC_CR1_EOCIE);
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MCAL_ADC_init+0x64>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <MCAL_ADC_init+0x64>)
 8000fe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000fea:	6053      	str	r3, [r2, #4]

    // Set continuous mode
    ADC1->CR2 |= ADC_CR2_CONT;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <MCAL_ADC_init+0x64>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <MCAL_ADC_init+0x64>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	6093      	str	r3, [r2, #8]

    // Enable ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <MCAL_ADC_init+0x64>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <MCAL_ADC_init+0x64>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6093      	str	r3, [r2, #8]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000
 8001010:	40012400 	.word	0x40012400

08001014 <MCAL_ADC_SelectChannel>:

void MCAL_ADC_SelectChannel(uint8_t ChannelNum) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    // Select Regular channel
    ADC1->SQR3 = (ADC1->SQR3 & ~(ADC_SQR3_SQ1)) | (ChannelNum << 0);
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <MCAL_ADC_SelectChannel+0x20>)
 8001020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <MCAL_ADC_SelectChannel+0x20>)
 8001026:	4313      	orrs	r3, r2
 8001028:	634b      	str	r3, [r1, #52]	; 0x34
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40012400 	.word	0x40012400

08001038 <MCAL_ADC_ConvertToDigital>:

uint16_t MCAL_ADC_ConvertToDigital(uint8_t ChannelNum) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    // Select Regular channel
    MCAL_ADC_SelectChannel(ChannelNum);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffe5 	bl	8001014 <MCAL_ADC_SelectChannel>

    // Start conversion of regular channels
    ADC1->CR2 |= ADC_CR2_SWSTART;
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <MCAL_ADC_ConvertToDigital+0x48>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <MCAL_ADC_ConvertToDigital+0x48>)
 8001050:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001054:	6093      	str	r3, [r2, #8]

    // Poll for end of conversion
    while (!(ADC1->SR & ADC_SR_EOC));
 8001056:	bf00      	nop
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MCAL_ADC_ConvertToDigital+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f9      	beq.n	8001058 <MCAL_ADC_ConvertToDigital+0x20>

    // Clear the EOC flag
    ADC1->SR &= ~ADC_SR_EOC;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MCAL_ADC_ConvertToDigital+0x48>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <MCAL_ADC_ConvertToDigital+0x48>)
 800106a:	f023 0302 	bic.w	r3, r3, #2
 800106e:	6013      	str	r3, [r2, #0]

    // Return ADC Data
    return ADC1->DR;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <MCAL_ADC_ConvertToDigital+0x48>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	b29b      	uxth	r3, r3
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40012400 	.word	0x40012400

08001084 <EXTI0_IRQHandler>:



// EXTI0
void EXTI0_IRQHandler (void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <EXTI0_IRQHandler+0x1c>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <EXTI0_IRQHandler+0x1c>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <EXTI0_IRQHandler+0x20>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4798      	blx	r3

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010400 	.word	0x40010400
 80010a4:	20000084 	.word	0x20000084

080010a8 <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <EXTI1_IRQHandler+0x1c>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <EXTI1_IRQHandler+0x1c>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <EXTI1_IRQHandler+0x20>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4798      	blx	r3

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40010400 	.word	0x40010400
 80010c8:	20000084 	.word	0x20000084

080010cc <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <EXTI2_IRQHandler+0x1c>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <EXTI2_IRQHandler+0x1c>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <EXTI2_IRQHandler+0x20>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4798      	blx	r3

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40010400 	.word	0x40010400
 80010ec:	20000084 	.word	0x20000084

080010f0 <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <EXTI3_IRQHandler+0x1c>)
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <EXTI3_IRQHandler+0x1c>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <EXTI3_IRQHandler+0x20>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4798      	blx	r3

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010400 	.word	0x40010400
 8001110:	20000084 	.word	0x20000084

08001114 <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <EXTI4_IRQHandler+0x1c>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <EXTI4_IRQHandler+0x1c>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <EXTI4_IRQHandler+0x20>)
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	4798      	blx	r3

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40010400 	.word	0x40010400
 8001134:	20000084 	.word	0x20000084

08001138 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <EXTI9_5_IRQHandler+0x22>
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	6153      	str	r3, [r2, #20]
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <EXTI9_5_IRQHandler+0xa4>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001162:	2b00      	cmp	r3, #0
 8001164:	d008      	beq.n	8001178 <EXTI9_5_IRQHandler+0x40>
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 800116c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <EXTI9_5_IRQHandler+0xa4>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <EXTI9_5_IRQHandler+0x5e>
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 800118a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118e:	6153      	str	r3, [r2, #20]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <EXTI9_5_IRQHandler+0xa4>)
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d008      	beq.n	80011b4 <EXTI9_5_IRQHandler+0x7c>
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <EXTI9_5_IRQHandler+0xa4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <EXTI9_5_IRQHandler+0x9a>
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <EXTI9_5_IRQHandler+0xa0>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ca:	6153      	str	r3, [r2, #20]
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <EXTI9_5_IRQHandler+0xa4>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	4798      	blx	r3
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40010400 	.word	0x40010400
 80011dc:	20000084 	.word	0x20000084

080011e0 <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <EXTI15_10_IRQHandler+0x22>
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	4a29      	ldr	r2, [pc, #164]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6153      	str	r3, [r2, #20]
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <EXTI15_10_IRQHandler+0xc0>)
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800120a:	2b00      	cmp	r3, #0
 800120c:	d008      	beq.n	8001220 <EXTI15_10_IRQHandler+0x40>
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a22      	ldr	r2, [pc, #136]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 8001214:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <EXTI15_10_IRQHandler+0xc0>)
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <EXTI15_10_IRQHandler+0x5e>
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	4a1a      	ldr	r2, [pc, #104]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 8001232:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001236:	6153      	str	r3, [r2, #20]
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <EXTI15_10_IRQHandler+0xc0>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <EXTI15_10_IRQHandler+0x7c>
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 8001250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <EXTI15_10_IRQHandler+0xc0>)
 8001258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125a:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <EXTI15_10_IRQHandler+0x9a>
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001272:	6153      	str	r3, [r2, #20]
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <EXTI15_10_IRQHandler+0xc0>)
 8001276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001278:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <EXTI15_10_IRQHandler+0xb8>
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <EXTI15_10_IRQHandler+0xbc>)
 800128c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <EXTI15_10_IRQHandler+0xc0>)
 8001294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001296:	4798      	blx	r3
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40010400 	.word	0x40010400
 80012a0:	20000084 	.word	0x20000084

080012a4 <Get_CRLH_Position>:




uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2b80      	cmp	r3, #128	; 0x80
 80012b2:	d042      	beq.n	800133a <Get_CRLH_Position+0x96>
 80012b4:	2b80      	cmp	r3, #128	; 0x80
 80012b6:	dc11      	bgt.n	80012dc <Get_CRLH_Position+0x38>
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d036      	beq.n	800132a <Get_CRLH_Position+0x86>
 80012bc:	2b08      	cmp	r3, #8
 80012be:	dc06      	bgt.n	80012ce <Get_CRLH_Position+0x2a>
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d02e      	beq.n	8001322 <Get_CRLH_Position+0x7e>
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d02e      	beq.n	8001326 <Get_CRLH_Position+0x82>
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d028      	beq.n	800131e <Get_CRLH_Position+0x7a>
 80012cc:	e047      	b.n	800135e <Get_CRLH_Position+0xba>
 80012ce:	2b20      	cmp	r3, #32
 80012d0:	d02f      	beq.n	8001332 <Get_CRLH_Position+0x8e>
 80012d2:	2b40      	cmp	r3, #64	; 0x40
 80012d4:	d02f      	beq.n	8001336 <Get_CRLH_Position+0x92>
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d029      	beq.n	800132e <Get_CRLH_Position+0x8a>
 80012da:	e040      	b.n	800135e <Get_CRLH_Position+0xba>
 80012dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012e0:	d033      	beq.n	800134a <Get_CRLH_Position+0xa6>
 80012e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012e6:	dc09      	bgt.n	80012fc <Get_CRLH_Position+0x58>
 80012e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ec:	d029      	beq.n	8001342 <Get_CRLH_Position+0x9e>
 80012ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f2:	d028      	beq.n	8001346 <Get_CRLH_Position+0xa2>
 80012f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f8:	d021      	beq.n	800133e <Get_CRLH_Position+0x9a>
 80012fa:	e030      	b.n	800135e <Get_CRLH_Position+0xba>
 80012fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001300:	d027      	beq.n	8001352 <Get_CRLH_Position+0xae>
 8001302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001306:	dc03      	bgt.n	8001310 <Get_CRLH_Position+0x6c>
 8001308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800130c:	d01f      	beq.n	800134e <Get_CRLH_Position+0xaa>
 800130e:	e026      	b.n	800135e <Get_CRLH_Position+0xba>
 8001310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001314:	d01f      	beq.n	8001356 <Get_CRLH_Position+0xb2>
 8001316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800131a:	d01e      	beq.n	800135a <Get_CRLH_Position+0xb6>
 800131c:	e01f      	b.n	800135e <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 800131e:	2300      	movs	r3, #0
 8001320:	e01e      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8001322:	2304      	movs	r3, #4
 8001324:	e01c      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 8001326:	2308      	movs	r3, #8
 8001328:	e01a      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 800132a:	230c      	movs	r3, #12
 800132c:	e018      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 800132e:	2310      	movs	r3, #16
 8001330:	e016      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 8001332:	2314      	movs	r3, #20
 8001334:	e014      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8001336:	2318      	movs	r3, #24
 8001338:	e012      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 800133a:	231c      	movs	r3, #28
 800133c:	e010      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 800133e:	2300      	movs	r3, #0
 8001340:	e00e      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 8001342:	2304      	movs	r3, #4
 8001344:	e00c      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8001346:	2308      	movs	r3, #8
 8001348:	e00a      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 800134a:	230c      	movs	r3, #12
 800134c:	e008      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800134e:	2310      	movs	r3, #16
 8001350:	e006      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8001352:	2314      	movs	r3, #20
 8001354:	e004      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8001356:	2318      	movs	r3, #24
 8001358:	e002      	b.n	8001360 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 800135a:	231c      	movs	r3, #28
 800135c:	e000      	b.n	8001360 <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 800136a:	b590      	push	{r4, r7, lr}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIO_Pin_CRL) Configure PINS from 0 >>> 7
	// Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]

	// Determine whether to configure low or high register based on Pin number
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	2bff      	cmp	r3, #255	; 0xff
 8001382:	d801      	bhi.n	8001388 <MCAL_GPIO_Init+0x1e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	e001      	b.n	800138c <MCAL_GPIO_Init+0x22>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3304      	adds	r3, #4
 800138c:	60bb      	str	r3, [r7, #8]

	// Clear CNF[1:0] MODE[1:0] bits in the configuration register
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff86 	bl	80012a4 <Get_CRLH_Position>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	230f      	movs	r3, #15
 800139e:	4093      	lsls	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	401a      	ands	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	601a      	str	r2, [r3, #0]

	// Check if the pin is configured as an output
	if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	789b      	ldrb	r3, [r3, #2]
 80013b0:	2b07      	cmp	r3, #7
 80013b2:	d00b      	beq.n	80013cc <MCAL_GPIO_Init+0x62>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	789b      	ldrb	r3, [r3, #2]
 80013b8:	2b06      	cmp	r3, #6
 80013ba:	d007      	beq.n	80013cc <MCAL_GPIO_Init+0x62>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d003      	beq.n	80013cc <MCAL_GPIO_Init+0x62>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d10e      	bne.n	80013ea <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] MODE[1:0] bits based on GPIO mode and output speed
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	3b04      	subs	r3, #4
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	b25a      	sxtb	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	78db      	ldrb	r3, [r3, #3]
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e02c      	b.n	8001444 <MCAL_GPIO_Init+0xda>
	}
	// If pin is configured as an input
	else
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	789b      	ldrb	r3, [r3, #2]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d003      	beq.n	80013fa <MCAL_GPIO_Init+0x90>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	789b      	ldrb	r3, [r3, #2]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d107      	bne.n	800140a <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] MODE[1:0] bits for input mode
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0f);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e01c      	b.n	8001444 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Consider it as input floating
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	789b      	ldrb	r3, [r3, #2]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d102      	bne.n	8001418 <MCAL_GPIO_Init+0xae>
		{
			// Set CNF[1:0] MODE[1:0] bits for input mode (floating)
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0f);
 8001412:	2304      	movs	r3, #4
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e015      	b.n	8001444 <MCAL_GPIO_Init+0xda>
		}
		else // Pull-up or Pull-down input
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f);
 8001418:	2308      	movs	r3, #8
 800141a:	73fb      	strb	r3, [r7, #15]

			// Configure pull-up or pull-down in ODR based on GPIO mode
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	789b      	ldrb	r3, [r3, #2]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d107      	bne.n	8001434 <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1: Input pull-up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	8812      	ldrh	r2, [r2, #0]
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	e007      	b.n	8001444 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0: Input pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	8812      	ldrh	r2, [r2, #0]
 800143c:	43d2      	mvns	r2, r2
 800143e:	401a      	ands	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Write the configuration to the CRL or CRH register
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001444:	7bfc      	ldrb	r4, [r7, #15]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff2a 	bl	80012a4 <Get_CRLH_Position>
 8001450:	4603      	mov	r3, r0
 8001452:	fa04 f203 	lsl.w	r2, r4, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	431a      	orrs	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}

08001468 <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOx,uint16_t PinNumber )
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if (((GPIOx->IDR) & PinNumber ) !=  (uint32_t)GPIO_PIN_RESET )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e001      	b.n	800148a <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitstatus = GPIO_PIN_RESET ;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
	}
	return  bitstatus ;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	807b      	strh	r3, [r7, #2]
 80014a2:	4613      	mov	r3, r2
 80014a4:	707b      	strb	r3, [r7, #1]
	if ( Value !=  GPIO_PIN_RESET )
 80014a6:	787b      	ldrb	r3, [r7, #1]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <MCAL_GPIO_WritePin+0x1e>
		//		or
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 80014ac:	887a      	ldrh	r2, [r7, #2]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	611a      	str	r2, [r3, #16]
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}

}
 80014b2:	e002      	b.n	80014ba <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	615a      	str	r2, [r3, #20]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <I2C1_EV_IRQHandler+0xe8>)
 80014dc:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e6:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f0:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00a      	beq.n	8001518 <I2C1_EV_IRQHandler+0x48>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 8001510:	2100      	movs	r1, #0
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f000 f852 	bl	80015bc <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d012      	beq.n	800154e <I2C1_EV_IRQHandler+0x7e>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00f      	beq.n	800154e <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8001546:	2102      	movs	r1, #2
 8001548:	6978      	ldr	r0, [r7, #20]
 800154a:	f000 f837 	bl	80015bc <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00f      	beq.n	800157e <I2C1_EV_IRQHandler+0xae>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00c      	beq.n	800157e <I2C1_EV_IRQHandler+0xae>
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8001576:	2103      	movs	r1, #3
 8001578:	6978      	ldr	r0, [r7, #20]
 800157a:	f000 f81f 	bl	80015bc <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00f      	beq.n	80015ae <I2C1_EV_IRQHandler+0xde>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00c      	beq.n	80015ae <I2C1_EV_IRQHandler+0xde>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d009      	beq.n	80015ae <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 80015a6:	2104      	movs	r1, #4
 80015a8:	6978      	ldr	r0, [r7, #20]
 80015aa:	f000 f807 	bl	80015bc <Slave_States>
			}
		}



}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40005400 	.word	0x40005400

080015bc <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a32      	ldr	r2, [pc, #200]	; (8001694 <Slave_States+0xd8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]

	switch (state)
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d856      	bhi.n	800168c <Slave_States+0xd0>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <Slave_States+0x28>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080015ff 	.word	0x080015ff
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	08001623 	.word	0x08001623
 80015f0:	0800163b 	.word	0x0800163b
 80015f4:	0800165f 	.word	0x0800165f
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80015fc:	e046      	b.n	800168c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03b      	beq.n	8001682 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	4922      	ldr	r1, [pc, #136]	; (8001698 <Slave_States+0xdc>)
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	3320      	adds	r3, #32
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2000      	movs	r0, #0
 800161e:	4798      	blx	r3
		}

		break ;
 8001620:	e02f      	b.n	8001682 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	491c      	ldr	r1, [pc, #112]	; (8001698 <Slave_States+0xdc>)
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3320      	adds	r3, #32
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2002      	movs	r0, #2
 8001636:	4798      	blx	r3

		break ;
 8001638:	e028      	b.n	800168c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	d01f      	beq.n	8001686 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	4913      	ldr	r1, [pc, #76]	; (8001698 <Slave_States+0xdc>)
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3320      	adds	r3, #32
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2003      	movs	r0, #3
 800165a:	4798      	blx	r3
		}

		break ;
 800165c:	e013      	b.n	8001686 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	490a      	ldr	r1, [pc, #40]	; (8001698 <Slave_States+0xdc>)
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3320      	adds	r3, #32
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2004      	movs	r0, #4
 800167e:	4798      	blx	r3
		}

		break ;
 8001680:	e003      	b.n	800168a <Slave_States+0xce>
		break ;
 8001682:	bf00      	nop
 8001684:	e002      	b.n	800168c <Slave_States+0xd0>
		break ;
 8001686:	bf00      	nop
 8001688:	e000      	b.n	800168c <Slave_States+0xd0>
		break ;
 800168a:	bf00      	nop
	}
	}

}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40005400 	.word	0x40005400
 8001698:	2000001c 	.word	0x2000001c

0800169c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d006      	beq.n	80016d4 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d302      	bcc.n	80016d0 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d004      	beq.n	80016d8 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 80016ce:	e005      	b.n	80016dc <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80016d2:	e003      	b.n	80016dc <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80016d6:	e001      	b.n	80016dc <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80016da:	e7ff      	b.n	80016dc <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000
 80016e8:	007a1200 	.word	0x007a1200
 80016ec:	00f42400 	.word	0x00f42400

080016f0 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 80016f4:	f7ff ffde 	bl	80016b4 <MCAL_RCC_GetSYS_CLCKFreq>
 80016f8:	4601      	mov	r1, r0
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <MCAL_RCC_GetHCLKFreq+0x20>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <MCAL_RCC_GetHCLKFreq+0x24>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	0800239c 	.word	0x0800239c

08001718 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 800171c:	f7ff ffe8 	bl	80016f0 <MCAL_RCC_GetHCLKFreq>
 8001720:	4601      	mov	r1, r0
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <MCAL_RCC_GetPCLK1Freq+0x24>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	08002394 	.word	0x08002394

08001740 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8001744:	f7ff ffd4 	bl	80016f0 <MCAL_RCC_GetHCLKFreq>
 8001748:	4601      	mov	r1, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	0adb      	lsrs	r3, r3, #11
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	08002394 	.word	0x08002394

08001768 <SPI1_IRQHandler>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	S_IRQ_SRC_t IRQ;

	IRQ.TXE  = ((SPI1->SR & (1<<1)) >> 1);
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <SPI1_IRQHandler+0x54>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	793b      	ldrb	r3, [r7, #4]
 800177c:	f362 0300 	bfi	r3, r2, #0, #1
 8001780:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <SPI1_IRQHandler+0x54>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	793b      	ldrb	r3, [r7, #4]
 800178e:	f362 0341 	bfi	r3, r2, #1, #1
 8001792:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <SPI1_IRQHandler+0x54>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	793b      	ldrb	r3, [r7, #4]
 80017a2:	f362 0382 	bfi	r3, r2, #2, #1
 80017a6:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_Call_Back(&IRQ);
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SPI1_IRQHandler+0x58>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	1d3a      	adds	r2, r7, #4
 80017b0:	4610      	mov	r0, r2
 80017b2:	4798      	blx	r3
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40013000 	.word	0x40013000
 80017c0:	20000064 	.word	0x20000064

080017c4 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
	S_IRQ_SRC_t IRQ;

	IRQ.TXE = ((SPI2->SR & (1<<1)) >> 1);
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <SPI2_IRQHandler+0x54>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	085b      	lsrs	r3, r3, #1
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	793b      	ldrb	r3, [r7, #4]
 80017d8:	f362 0300 	bfi	r3, r2, #0, #1
 80017dc:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <SPI2_IRQHandler+0x54>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	793b      	ldrb	r3, [r7, #4]
 80017ea:	f362 0341 	bfi	r3, r2, #1, #1
 80017ee:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <SPI2_IRQHandler+0x54>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	793b      	ldrb	r3, [r7, #4]
 80017fe:	f362 0382 	bfi	r3, r2, #2, #1
 8001802:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_Call_Back(&IRQ);
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SPI2_IRQHandler+0x58>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	1d3a      	adds	r2, r7, #4
 800180c:	4610      	mov	r0, r2
 800180e:	4798      	blx	r3
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40003800 	.word	0x40003800
 800181c:	20000064 	.word	0x20000064

08001820 <STK_u8SetuSBusyWait>:

/*******************************************************************************
* Function Name:		STK_u8SetBusyWait
********************************************************************************/
 uint8_t STK_u8SetuSBusyWait(uint32_t Copy_u32Time_us)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	 uint8_t Local_u8ErrorState = STD_TYPES_OK;
 8001828:	2301      	movs	r3, #1
 800182a:	72fb      	strb	r3, [r7, #11]
	uint32_t Local_u32LoadValue;

	if(GET_BIT(STK->CTRL,2)) /* The clock source is AHB/1 */
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <STK_u8SetuSBusyWait+0x20>
	{
		Local_u32LoadValue = (F_CPU/1000000)*Copy_u32Time_us ;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e001      	b.n	8001844 <STK_u8SetuSBusyWait+0x24>
	}
	else /* The clock source is AHB/8 */
	{
		Local_u32LoadValue = (F_CPU/8000000)*Copy_u32Time_us ;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	60fb      	str	r3, [r7, #12]
	}

	if(Local_u32LoadValue <= 0x00FFFFFFFF)
	{
		/* Close the exception request */
		CLR_BIT(STK->CTRL,1);
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 800184a:	f023 0302 	bic.w	r3, r3, #2
 800184e:	6013      	str	r3, [r2, #0]
		/* Load the required delay */
		STK->LOAD = Local_u32LoadValue ;
 8001850:	4a12      	ldr	r2, [pc, #72]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6053      	str	r3, [r2, #4]
		/* Enable the timer */
		SET_BIT(STK->CTRL,0);
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6013      	str	r3, [r2, #0]
		/* Start the change immediately by writing any value to VAL register */
		STK->VAL = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
		/* Wait until timer reach zero */
		while(GET_BIT(STK->CTRL,16) == 0);
 8001868:	bf00      	nop
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f9      	beq.n	800186a <STK_u8SetuSBusyWait+0x4a>
		/* Disable Timer */
		CLR_BIT(STK->CTRL,0);
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6013      	str	r3, [r2, #0]
		STK->LOAD = 0;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
		STK->VAL  = 0;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <STK_u8SetuSBusyWait+0x7c>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
	}

	return Local_u8ErrorState;
 800188e:	7afb      	ldrb	r3, [r7, #11]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <SysTick_Handler>:

/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/
void SysTick_Handler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	if(STK_u8ModeOfInterval == STK_u8_SINGLE_INTERVAL)
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <SysTick_Handler+0x50>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d111      	bne.n	80018d0 <SysTick_Handler+0x30>
	{
		/* Disable and Stop The Timer */
		CLR_BIT(STK->CTRL,0);
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <SysTick_Handler+0x54>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <SysTick_Handler+0x54>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->CTRL,1);
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <SysTick_Handler+0x54>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <SysTick_Handler+0x54>)
 80018be:	f023 0302 	bic.w	r3, r3, #2
 80018c2:	6013      	str	r3, [r2, #0]
		STK->LOAD = 0;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <SysTick_Handler+0x54>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
		STK->VAL  = 0;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <SysTick_Handler+0x54>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
	}
	if(STK_Pf != NULL)
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <SysTick_Handler+0x58>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <SysTick_Handler+0x3e>
	{
		STK_Pf();
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <SysTick_Handler+0x58>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4798      	blx	r3
	}
	/* Clear The Interrupt Flag */
	CLR_BIT(STK->CTRL,16);
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Handler+0x54>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <SysTick_Handler+0x54>)
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000070 	.word	0x20000070
 80018f4:	e000e010 	.word	0xe000e010
 80018f8:	2000006c 	.word	0x2000006c

080018fc <TIM2_Init>:

#include "Timer.h"


void TIM2_Init(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
	// Enable Timer 2 clock
	RCC_TIMER2_CLK_EN();
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <TIM2_Init+0x7c>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <TIM2_Init+0x7c>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	61d3      	str	r3, [r2, #28]

	// Reset Timer 2 configuration
	TIM2->CR1 = 0;
 800190c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
	TIM2->CR2 = 0;
 8001914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
	TIM2->SMCR = 0;
 800191c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
	TIM2->DIER = 0;
 8001924:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
	TIM2->SR = 0;
 800192c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
	TIM2->EGR = 0;
 8001934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
	TIM2->CCMR1 = 0;
 800193c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
	TIM2->CCMR2 = 0;
 8001944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
	TIM2->CCER = 0;
 800194c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]

	// Configure Timer 2 base unit
	TIM2->PSC = (SYSTEM_CLOCK / 1000000) - 1; // Prescaler for 1 MHz clock (1 us ticks)
 8001954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001958:	2207      	movs	r2, #7
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF; // Max period (16-bit timer)
 800195c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 = TIM_CR1_CEN; // Enable the timer
 8001966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <Delay_us>:


void Delay_us(uint32_t us)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	// Configure Timer 2 for a delay in microseconds
	TIM2->ARR = us - 1; // Set the auto-reload value
 8001984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CNT = 0; // Reset the counter
 800198e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN; // Enable the counter
 8001996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6013      	str	r3, [r2, #0]

	// Wait for the update event flag to be set
	while (!(TIM2->SR & TIM_SR_UIF));
 80019a6:	bf00      	nop
 80019a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f8      	beq.n	80019a8 <Delay_us+0x2c>

	// Clear the update event flag
	TIM2->SR &= ~TIM_SR_UIF;
 80019b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6113      	str	r3, [r2, #16]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < ms; i++)
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e006      	b.n	80019ec <Delay_ms+0x1c>
	{
		Delay_us(1000); // 1000 microseconds = 1 millisecond
 80019de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e2:	f7ff ffcb 	bl	800197c <Delay_us>
	for (uint32_t i = 0; i < ms; i++)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d3f4      	bcc.n	80019de <Delay_ms+0xe>
	}
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <Delay_Sec>:


void Delay_Sec(uint32_t sec)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < sec; i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e006      	b.n	8001a18 <Delay_Sec+0x1c>
	{
		Delay_ms(1000); // 1000 microseconds = 1 millisecond
 8001a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0e:	f7ff ffdf 	bl	80019d0 <Delay_ms>
	for (uint32_t i = 0; i < sec; i++)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3f4      	bcc.n	8001a0a <Delay_Sec+0xe>
	}
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <TIM1_Init_PWM>:

void TIM1_Init_PWM(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	/*GPIO Configuration */
	//PA8 CH1 PWM1
	GPIO_PinConfig_t x;
	x.GPIO_PinNumber = GPIO_PIN_8;
 8001a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a32:	80bb      	strh	r3, [r7, #4]
	x.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001a34:	2306      	movs	r3, #6
 8001a36:	71bb      	strb	r3, [r7, #6]
	x.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &x);
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4824      	ldr	r0, [pc, #144]	; (8001ad4 <TIM1_Init_PWM+0xac>)
 8001a42:	f7ff fc92 	bl	800136a <MCAL_GPIO_Init>
	//A11 CH4 PWM2
	//MGPIO_voidSetPinDirection(GPIOA,PIN11,OTPUT_SPEED_10MHZ_AFOPP);

	/*Timer1 Configuration*/
	//Bit 11 TIM1EN: TIM1 timer clock enable
	RCC_APB2ENR |=(1<<11);
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <TIM1_Init_PWM+0xb0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <TIM1_Init_PWM+0xb0>)
 8001a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a50:	6013      	str	r3, [r2, #0]

	//Bit 7 ARPE: Auto-reload preload enable
	TIM1_CR1 |=(1<<7);
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <TIM1_Init_PWM+0xb4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a21      	ldr	r2, [pc, #132]	; (8001adc <TIM1_Init_PWM+0xb4>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5c:	6013      	str	r3, [r2, #0]

	//Upcounting is active when the DIR bit in the TIMx_CR1 register is low
	//Bit 4 DIR: Direction
	TIM1_CR1 &=~(1<<4);
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <TIM1_Init_PWM+0xb4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <TIM1_Init_PWM+0xb4>)
 8001a64:	f023 0310 	bic.w	r3, r3, #16
 8001a68:	6013      	str	r3, [r2, #0]

	TIM1_PSC=7;
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <TIM1_Init_PWM+0xb8>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]

	//allows generating a signal with a frequency determined by the value of the TIMx_ARR register
	TIM1_ARR = 0xC350;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <TIM1_Init_PWM+0xbc>)
 8001a72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a76:	601a      	str	r2, [r3, #0]

	/*=========================Channel 1 ==============================*/
	//Bits 6:4 OC1M: Output Compare 1 mode
	//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
	TIM1_CCMR1 |=(0b110<<4);
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <TIM1_Init_PWM+0xc0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <TIM1_Init_PWM+0xc0>)
 8001a7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a82:	6013      	str	r3, [r2, #0]

	/*The corresponding preload register must be enabled by setting the
    OCxPE bit in the TIMx_CCMRx register*/
	//Bit 3 OC1PE: Output Compare 1 preload enable
	TIM1_CCMR1 |=(1<<3);
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <TIM1_Init_PWM+0xc0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <TIM1_Init_PWM+0xc0>)
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	6013      	str	r3, [r2, #0]
	//1: OC1 active low
	//TIM1_CCER |=(1<<1);


	//Bit 0 CC1E: Capture/Compare 1 output enable
	TIM1_CCER |=(1<<0);
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <TIM1_Init_PWM+0xc4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a15      	ldr	r2, [pc, #84]	; (8001aec <TIM1_Init_PWM+0xc4>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]

	//Bits 12:14 OC1M: Output Compare 1 mode
	//110: PWM mode 1 - In upcounting, channel 4 is active as long as TIM1_CNT<TIM1_CCR4
	TIM1_CCMR2 |=(0b110<<12);
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <TIM1_Init_PWM+0xc8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <TIM1_Init_PWM+0xc8>)
 8001aa2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001aa6:	6013      	str	r3, [r2, #0]



	/*=========================Channel 4 ==============================*/
	//Bit 11 OC4PE: Output compare 4 preload enable
	TIM1_CCMR2 |=(1<<11);
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <TIM1_Init_PWM+0xc8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <TIM1_Init_PWM+0xc8>)
 8001aae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab2:	6013      	str	r3, [r2, #0]

	//Bit 12 CC4E: Capture/Compare 4 output enable
	TIM1_CCER |=(1<<12);
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <TIM1_Init_PWM+0xc4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <TIM1_Init_PWM+0xc4>)
 8001aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001abe:	6013      	str	r3, [r2, #0]
	//1: OC1 active low
	//TIM1_CCER |=(1<<13);


	//Bit 15 MOE: Main output enable
	TIM1_BDTR |=(1<<15);
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <TIM1_Init_PWM+0xcc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <TIM1_Init_PWM+0xcc>)
 8001ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aca:	6013      	str	r3, [r2, #0]





}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40021018 	.word	0x40021018
 8001adc:	40012c00 	.word	0x40012c00
 8001ae0:	40012c28 	.word	0x40012c28
 8001ae4:	40012c2c 	.word	0x40012c2c
 8001ae8:	40012c18 	.word	0x40012c18
 8001aec:	40012c20 	.word	0x40012c20
 8001af0:	40012c1c 	.word	0x40012c1c
 8001af4:	40012c44 	.word	0x40012c44

08001af8 <Timer1_PWM1_Set_Value>:
	TIM1_ARR = 0xC350;
 *
 */

void Timer1_PWM1_Set_Value(int PWM1)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	//duty cycle determined by the value of the TIMx_CCRx register.
	TIM1_CCR1 = PWM1;
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <Timer1_PWM1_Set_Value+0x24>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
	//Bit 0 CEN: Counter enable
	TIM1_CR1 |=(1<<0);
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <Timer1_PWM1_Set_Value+0x28>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <Timer1_PWM1_Set_Value+0x28>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6013      	str	r3, [r2, #0]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40012c34 	.word	0x40012c34
 8001b20:	40012c00 	.word	0x40012c00

08001b24 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config_t* UART_Config)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 8001b2e:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <MCAL_UART_Init+0x16c>)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <MCAL_UART_Init+0x170>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d106      	bne.n	8001b4a <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8001b3c:	4b56      	ldr	r3, [pc, #344]	; (8001c98 <MCAL_UART_Init+0x174>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a55      	ldr	r2, [pc, #340]	; (8001c98 <MCAL_UART_Init+0x174>)
 8001b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	e014      	b.n	8001b74 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a53      	ldr	r2, [pc, #332]	; (8001c9c <MCAL_UART_Init+0x178>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d106      	bne.n	8001b60 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8001b52:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <MCAL_UART_Init+0x174>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <MCAL_UART_Init+0x174>)
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	e009      	b.n	8001b74 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <MCAL_UART_Init+0x17c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d105      	bne.n	8001b74 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <MCAL_UART_Init+0x174>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <MCAL_UART_Init+0x174>)
 8001b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b72:	61d3      	str	r3, [r2, #28]

	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	7a12      	ldrb	r2, [r2, #8]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	7a52      	ldrb	r2, [r2, #9]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	7a92      	ldrb	r2, [r2, #10]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	7ad2      	ldrb	r2, [r2, #11]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a32      	ldr	r2, [pc, #200]	; (8001c94 <MCAL_UART_Init+0x170>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d104      	bne.n	8001bd8 <MCAL_UART_Init+0xb4>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8001bce:	f7ff fdb7 	bl	8001740 <MCAL_RCC_GetPCLK2Freq>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e003      	b.n	8001be0 <MCAL_UART_Init+0xbc>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8001bd8:	f7ff fd9e 	bl	8001718 <MCAL_RCC_GetPCLK1Freq>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60fb      	str	r3, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	0119      	lsls	r1, r3, #4
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009a      	lsls	r2, r3, #2
 8001bf8:	441a      	add	r2, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c10:	2064      	movs	r0, #100	; 0x64
 8001c12:	fb00 f303 	mul.w	r3, r0, r3
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <MCAL_UART_Init+0x180>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	430b      	orrs	r3, r1
 8001c28:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	7b1b      	ldrb	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d026      	beq.n	8001c86 <MCAL_UART_Init+0x162>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	7b12      	ldrb	r2, [r2, #12]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MCAL_UART_Init+0x170>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d106      	bne.n	8001c5c <MCAL_UART_Init+0x138>
			NVIC_IRQ37_USART1_Enable() ;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <MCAL_UART_Init+0x184>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <MCAL_UART_Init+0x184>)
 8001c54:	f043 0320 	orr.w	r3, r3, #32
 8001c58:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable() ;

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable() ;
	}
}
 8001c5a:	e014      	b.n	8001c86 <MCAL_UART_Init+0x162>
		else if ( USARTx == USART2 )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <MCAL_UART_Init+0x178>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d106      	bne.n	8001c72 <MCAL_UART_Init+0x14e>
			NVIC_IRQ38_USART2_Enable() ;
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <MCAL_UART_Init+0x184>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <MCAL_UART_Init+0x184>)
 8001c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	e009      	b.n	8001c86 <MCAL_UART_Init+0x162>
		else if ( USARTx == USART3 )
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <MCAL_UART_Init+0x17c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d105      	bne.n	8001c86 <MCAL_UART_Init+0x162>
			NVIC_IRQ39_USART3_Enable() ;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MCAL_UART_Init+0x184>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <MCAL_UART_Init+0x184>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	6013      	str	r3, [r2, #0]
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000074 	.word	0x20000074
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40004800 	.word	0x40004800
 8001ca4:	51eb851f 	.word	0x51eb851f
 8001ca8:	e000e104 	.word	0xe000e104

08001cac <MCAL_UART_SendData>:
			//			When receiving with the parity enabled, the value read in the MSB bit is the received parity
			//			bit

 */

void MCAL_UART_SendData(USART_TypeDef *USARTx, uint16_t *pTxBuffer, enum Polling_mechism PollingEn) {
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set in the SR
	if (PollingEn == enable) {
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <MCAL_UART_SendData+0x22>
		while (!(USARTx->SR & USART_SR_TXE)); // Wait until transmit buffer is empty
 8001cc0:	bf00      	nop
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f9      	beq.n	8001cc2 <MCAL_UART_SendData+0x16>
	if (Global_UART_Config->Payload_Length == UART_Payload_Length_9B) {
		// If 9BIT, load the DR with 2 bytes masking the bits other than first 9 bits
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	} else {
		// This is 8-bit data transfer
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	605a      	str	r2, [r3, #4]
	}

	// Ensure that TXE flag is set again after data is transmitted
	while (!(USARTx->SR & USART_SR_TXE)); // Wait until transmit buffer is empty
 8001cd8:	bf00      	nop
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f9      	beq.n	8001cda <MCAL_UART_SendData+0x2e>
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <MCAL_UART_ReceiveData>:



void MCAL_UART_ReceiveData(USART_TypeDef *USARTx, uint16_t *pRxBuffer, enum Polling_mechism PollingEn) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR if polling is enabled
	if (PollingEn == enable) {
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d106      	bne.n	8001d12 <MCAL_UART_ReceiveData+0x22>
		while (!(USARTx->SR & USART_SR_RXNE)); // Wait until receive buffer is not empty
 8001d04:	bf00      	nop
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f9      	beq.n	8001d06 <MCAL_UART_ReceiveData+0x16>
			// Parity is used, so 8 bits will be user data and 1 bit is parity
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	} else {
		// This is 8-bit data
		if (Global_UART_Config->Parity == UART_Parity__NONE) {
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <MCAL_UART_ReceiveData+0x58>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	7a5b      	ldrb	r3, [r3, #9]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <MCAL_UART_ReceiveData+0x3c>
			// No parity, so all 8 bits are considered data
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	801a      	strh	r2, [r3, #0]
		} else {
			// Parity is used, so 7 bits will be user data and 1 bit is parity
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}
}
 8001d2a:	e007      	b.n	8001d3c <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	801a      	strh	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000074 	.word	0x20000074

08001d4c <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d118      	bne.n	8001d8e <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8001d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d60:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001d62:	2306      	movs	r3, #6
 8001d64:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4825      	ldr	r0, [pc, #148]	; (8001e08 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8001d72:	f7ff fafa 	bl	800136a <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4619      	mov	r1, r3
 8001d86:	4820      	ldr	r0, [pc, #128]	; (8001e08 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8001d88:	f7ff faef 	bl	800136a <MCAL_GPIO_Init>
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 8001d8c:	e036      	b.n	8001dfc <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2 )
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d116      	bne.n	8001dc4 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8001d96:	2304      	movs	r3, #4
 8001d98:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	4817      	ldr	r0, [pc, #92]	; (8001e08 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8001daa:	f7ff fade 	bl	800136a <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8001dae:	2308      	movs	r3, #8
 8001db0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8001db2:	2308      	movs	r3, #8
 8001db4:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4812      	ldr	r0, [pc, #72]	; (8001e08 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8001dbe:	f7ff fad4 	bl	800136a <MCAL_GPIO_Init>
}
 8001dc2:	e01b      	b.n	8001dfc <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d117      	bne.n	8001dfc <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4619      	mov	r1, r3
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8001de2:	f7ff fac2 	bl	800136a <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8001de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dea:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8001dec:	2308      	movs	r3, #8
 8001dee:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4619      	mov	r1, r3
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8001df8:	f7ff fab7 	bl	800136a <MCAL_GPIO_Init>
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	40004400 	.word	0x40004400
 8001e10:	40004800 	.word	0x40004800
 8001e14:	40010c00 	.word	0x40010c00

08001e18 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler (void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <USART1_IRQHandler+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	4798      	blx	r3

}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000074 	.word	0x20000074

08001e2c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <USART2_IRQHandler+0x10>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	4798      	blx	r3

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000074 	.word	0x20000074

08001e40 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <USART3_IRQHandler+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	4798      	blx	r3


}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000074 	.word	0x20000074

08001e54 <Bluetooth_Task>:

// Variable to hold received character and status flags
uint8_t ch = 0, direction = 0, light = 0, d = 0;

// Bluetooth task function
void Bluetooth_Task(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	// Receive data from Bluetooth
	MCAL_UART_ReceiveData(USART1, &ch, disable);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	49bf      	ldr	r1, [pc, #764]	; (8002158 <Bluetooth_Task+0x304>)
 8001e5c:	48bf      	ldr	r0, [pc, #764]	; (800215c <Bluetooth_Task+0x308>)
 8001e5e:	f7ff ff47 	bl	8001cf0 <MCAL_UART_ReceiveData>
	// Echo received data back
	MCAL_UART_SendData(USART1, &ch, enable);
 8001e62:	2200      	movs	r2, #0
 8001e64:	49bc      	ldr	r1, [pc, #752]	; (8002158 <Bluetooth_Task+0x304>)
 8001e66:	48bd      	ldr	r0, [pc, #756]	; (800215c <Bluetooth_Task+0x308>)
 8001e68:	f7ff ff20 	bl	8001cac <MCAL_UART_SendData>

	// Check if received character is 't'
	if (ch == 't') {
 8001e6c:	4bba      	ldr	r3, [pc, #744]	; (8002158 <Bluetooth_Task+0x304>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b74      	cmp	r3, #116	; 0x74
 8001e72:	d17a      	bne.n	8001f6a <Bluetooth_Task+0x116>
		while (1) {
			MCAL_UART_ReceiveData(USART1, &ch, disable);
 8001e74:	2201      	movs	r2, #1
 8001e76:	49b8      	ldr	r1, [pc, #736]	; (8002158 <Bluetooth_Task+0x304>)
 8001e78:	48b8      	ldr	r0, [pc, #736]	; (800215c <Bluetooth_Task+0x308>)
 8001e7a:	f7ff ff39 	bl	8001cf0 <MCAL_UART_ReceiveData>

			if (ch == 'f') {
 8001e7e:	4bb6      	ldr	r3, [pc, #728]	; (8002158 <Bluetooth_Task+0x304>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b66      	cmp	r3, #102	; 0x66
 8001e84:	d136      	bne.n	8001ef4 <Bluetooth_Task+0xa0>
				MCAL_UART_SendData(USART1, &ch, enable);
 8001e86:	2200      	movs	r2, #0
 8001e88:	49b3      	ldr	r1, [pc, #716]	; (8002158 <Bluetooth_Task+0x304>)
 8001e8a:	48b4      	ldr	r0, [pc, #720]	; (800215c <Bluetooth_Task+0x308>)
 8001e8c:	f7ff ff0e 	bl	8001cac <MCAL_UART_SendData>

				// Stop motors
				HAL_Motor_Stop(motor_1);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7fe ff33 	bl	8000cfc <HAL_Motor_Stop>
				HAL_Motor_Stop(motor_2);
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7fe ff30 	bl	8000cfc <HAL_Motor_Stop>
				Delay_Sec(1);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff fdad 	bl	80019fc <Delay_Sec>

				// Set motors to move forward
				HAL_Motor1_Direction(forward);
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7fe ff50 	bl	8000d48 <HAL_Motor1_Direction>
				HAL_Motor2_Direction(forward);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7fe ff7f 	bl	8000dac <HAL_Motor2_Direction>
				while (1) {
					// Check light sensor value
					light = HAL_LDR_Output_Value();
 8001eae:	f7fe ffe9 	bl	8000e84 <HAL_LDR_Output_Value>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4baa      	ldr	r3, [pc, #680]	; (8002160 <Bluetooth_Task+0x30c>)
 8001eb8:	701a      	strb	r2, [r3, #0]
					if (light < Dark)
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, HIGH);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	48a9      	ldr	r0, [pc, #676]	; (8002164 <Bluetooth_Task+0x310>)
 8001ec0:	f7ff fae9 	bl	8001496 <MCAL_GPIO_WritePin>
					else
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, LOW);

					MCAL_UART_ReceiveData(USART1, &ch, disable);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	49a4      	ldr	r1, [pc, #656]	; (8002158 <Bluetooth_Task+0x304>)
 8001ec8:	48a4      	ldr	r0, [pc, #656]	; (800215c <Bluetooth_Task+0x308>)
 8001eca:	f7ff ff11 	bl	8001cf0 <MCAL_UART_ReceiveData>
					if (ch == 'e') {
 8001ece:	4ba2      	ldr	r3, [pc, #648]	; (8002158 <Bluetooth_Task+0x304>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b65      	cmp	r3, #101	; 0x65
 8001ed4:	d1eb      	bne.n	8001eae <Bluetooth_Task+0x5a>
						MCAL_UART_SendData(USART1, &ch, enable);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	499f      	ldr	r1, [pc, #636]	; (8002158 <Bluetooth_Task+0x304>)
 8001eda:	48a0      	ldr	r0, [pc, #640]	; (800215c <Bluetooth_Task+0x308>)
 8001edc:	f7ff fee6 	bl	8001cac <MCAL_UART_SendData>
						// Ensure motors stop on exit
						HAL_Motor_Stop(motor_1);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7fe ff0b 	bl	8000cfc <HAL_Motor_Stop>
						HAL_Motor_Stop(motor_2);
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7fe ff08 	bl	8000cfc <HAL_Motor_Stop>
						Delay_Sec(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff fd85 	bl	80019fc <Delay_Sec>
						break;
 8001ef2:	e039      	b.n	8001f68 <Bluetooth_Task+0x114>
					}
				}
			} else if (ch == 'b') {
 8001ef4:	4b98      	ldr	r3, [pc, #608]	; (8002158 <Bluetooth_Task+0x304>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b62      	cmp	r3, #98	; 0x62
 8001efa:	d1bb      	bne.n	8001e74 <Bluetooth_Task+0x20>
				MCAL_UART_SendData(USART1, &ch, enable);
 8001efc:	2200      	movs	r2, #0
 8001efe:	4996      	ldr	r1, [pc, #600]	; (8002158 <Bluetooth_Task+0x304>)
 8001f00:	4896      	ldr	r0, [pc, #600]	; (800215c <Bluetooth_Task+0x308>)
 8001f02:	f7ff fed3 	bl	8001cac <MCAL_UART_SendData>

				// Stop motors
				HAL_Motor_Stop(motor_1);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7fe fef8 	bl	8000cfc <HAL_Motor_Stop>
				HAL_Motor_Stop(motor_2);
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f7fe fef5 	bl	8000cfc <HAL_Motor_Stop>

				Delay_Sec(1);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff fd72 	bl	80019fc <Delay_Sec>
				// Set motors to move backward
				HAL_Motor1_Direction(backward);
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7fe ff15 	bl	8000d48 <HAL_Motor1_Direction>
				HAL_Motor2_Direction(backward);
 8001f1e:	2002      	movs	r0, #2
 8001f20:	f7fe ff44 	bl	8000dac <HAL_Motor2_Direction>
				while (1) {
					// Check light sensor value
					light = HAL_LDR_Output_Value();
 8001f24:	f7fe ffae 	bl	8000e84 <HAL_LDR_Output_Value>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b8c      	ldr	r3, [pc, #560]	; (8002160 <Bluetooth_Task+0x30c>)
 8001f2e:	701a      	strb	r2, [r3, #0]
					if (light < Dark)
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, HIGH);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2120      	movs	r1, #32
 8001f34:	488b      	ldr	r0, [pc, #556]	; (8002164 <Bluetooth_Task+0x310>)
 8001f36:	f7ff faae 	bl	8001496 <MCAL_GPIO_WritePin>
					else
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, LOW);

					MCAL_UART_ReceiveData(USART1, &ch, disable);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4986      	ldr	r1, [pc, #536]	; (8002158 <Bluetooth_Task+0x304>)
 8001f3e:	4887      	ldr	r0, [pc, #540]	; (800215c <Bluetooth_Task+0x308>)
 8001f40:	f7ff fed6 	bl	8001cf0 <MCAL_UART_ReceiveData>
					if (ch == 'e') {
 8001f44:	4b84      	ldr	r3, [pc, #528]	; (8002158 <Bluetooth_Task+0x304>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b65      	cmp	r3, #101	; 0x65
 8001f4a:	d1eb      	bne.n	8001f24 <Bluetooth_Task+0xd0>
						MCAL_UART_SendData(USART1, &ch, enable);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4982      	ldr	r1, [pc, #520]	; (8002158 <Bluetooth_Task+0x304>)
 8001f50:	4882      	ldr	r0, [pc, #520]	; (800215c <Bluetooth_Task+0x308>)
 8001f52:	f7ff feab 	bl	8001cac <MCAL_UART_SendData>

						// Ensure motors stop on exit
						HAL_Motor_Stop(motor_1);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7fe fed0 	bl	8000cfc <HAL_Motor_Stop>
						HAL_Motor_Stop(motor_2);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f7fe fecd 	bl	8000cfc <HAL_Motor_Stop>
						Delay_Sec(1);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff fd4a 	bl	80019fc <Delay_Sec>
			MCAL_UART_ReceiveData(USART1, &ch, disable);
 8001f68:	e784      	b.n	8001e74 <Bluetooth_Task+0x20>
						break;
					}
				}
			}
		}
	} else if (ch == 'n') {
 8001f6a:	4b7b      	ldr	r3, [pc, #492]	; (8002158 <Bluetooth_Task+0x304>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b6e      	cmp	r3, #110	; 0x6e
 8001f70:	d15c      	bne.n	800202c <Bluetooth_Task+0x1d8>
		while (1) {
			MCAL_UART_ReceiveData(USART1, &ch, disable);
 8001f72:	2201      	movs	r2, #1
 8001f74:	4978      	ldr	r1, [pc, #480]	; (8002158 <Bluetooth_Task+0x304>)
 8001f76:	4879      	ldr	r0, [pc, #484]	; (800215c <Bluetooth_Task+0x308>)
 8001f78:	f7ff feba 	bl	8001cf0 <MCAL_UART_ReceiveData>

			if (ch == 'f') {
 8001f7c:	4b76      	ldr	r3, [pc, #472]	; (8002158 <Bluetooth_Task+0x304>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b66      	cmp	r3, #102	; 0x66
 8001f82:	d1f6      	bne.n	8001f72 <Bluetooth_Task+0x11e>
				MCAL_UART_SendData(USART1, &ch, enable);
 8001f84:	2200      	movs	r2, #0
 8001f86:	4974      	ldr	r1, [pc, #464]	; (8002158 <Bluetooth_Task+0x304>)
 8001f88:	4874      	ldr	r0, [pc, #464]	; (800215c <Bluetooth_Task+0x308>)
 8001f8a:	f7ff fe8f 	bl	8001cac <MCAL_UART_SendData>

				// Stop motors
				HAL_Motor_Stop(motor_1);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7fe feb4 	bl	8000cfc <HAL_Motor_Stop>
				HAL_Motor_Stop(motor_2);
 8001f94:	2002      	movs	r0, #2
 8001f96:	f7fe feb1 	bl	8000cfc <HAL_Motor_Stop>
				Delay_Sec(1);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff fd2e 	bl	80019fc <Delay_Sec>

				// Set motors to move forward
				HAL_Motor1_Direction(forward);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7fe fed1 	bl	8000d48 <HAL_Motor1_Direction>
				HAL_Motor2_Direction(forward);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7fe ff00 	bl	8000dac <HAL_Motor2_Direction>

				while (1) {
					MCAL_UART_ReceiveData(USART1, &ch, disable);
 8001fac:	2201      	movs	r2, #1
 8001fae:	496a      	ldr	r1, [pc, #424]	; (8002158 <Bluetooth_Task+0x304>)
 8001fb0:	486a      	ldr	r0, [pc, #424]	; (800215c <Bluetooth_Task+0x308>)
 8001fb2:	f7ff fe9d 	bl	8001cf0 <MCAL_UART_ReceiveData>
					if (ch == 'a') {
 8001fb6:	4b68      	ldr	r3, [pc, #416]	; (8002158 <Bluetooth_Task+0x304>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b61      	cmp	r3, #97	; 0x61
 8001fbc:	d103      	bne.n	8001fc6 <Bluetooth_Task+0x172>
						// Set motor speed
						HAL_Speed_Motor(speed_1);
 8001fbe:	205f      	movs	r0, #95	; 0x5f
 8001fc0:	f7fe ff26 	bl	8000e10 <HAL_Speed_Motor>
 8001fc4:	e00e      	b.n	8001fe4 <Bluetooth_Task+0x190>
					} else if (ch == 'b') {
 8001fc6:	4b64      	ldr	r3, [pc, #400]	; (8002158 <Bluetooth_Task+0x304>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b62      	cmp	r3, #98	; 0x62
 8001fcc:	d103      	bne.n	8001fd6 <Bluetooth_Task+0x182>
						// Set motor speed
						HAL_Speed_Motor(speed_2);
 8001fce:	2055      	movs	r0, #85	; 0x55
 8001fd0:	f7fe ff1e 	bl	8000e10 <HAL_Speed_Motor>
 8001fd4:	e006      	b.n	8001fe4 <Bluetooth_Task+0x190>
					} else if (ch == 'c') {
 8001fd6:	4b60      	ldr	r3, [pc, #384]	; (8002158 <Bluetooth_Task+0x304>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b63      	cmp	r3, #99	; 0x63
 8001fdc:	d102      	bne.n	8001fe4 <Bluetooth_Task+0x190>
						// Set motor speed
						HAL_Speed_Motor(speed_3);
 8001fde:	2032      	movs	r0, #50	; 0x32
 8001fe0:	f7fe ff16 	bl	8000e10 <HAL_Speed_Motor>
					}

					// Check light sensor value
					light = HAL_LDR_Output_Value();
 8001fe4:	f7fe ff4e 	bl	8000e84 <HAL_LDR_Output_Value>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <Bluetooth_Task+0x30c>)
 8001fee:	701a      	strb	r2, [r3, #0]
					if (light < Dark)
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, HIGH);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	485b      	ldr	r0, [pc, #364]	; (8002164 <Bluetooth_Task+0x310>)
 8001ff6:	f7ff fa4e 	bl	8001496 <MCAL_GPIO_WritePin>
					else
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, LOW);

					MCAL_UART_ReceiveData(USART1, &ch, disable);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4956      	ldr	r1, [pc, #344]	; (8002158 <Bluetooth_Task+0x304>)
 8001ffe:	4857      	ldr	r0, [pc, #348]	; (800215c <Bluetooth_Task+0x308>)
 8002000:	f7ff fe76 	bl	8001cf0 <MCAL_UART_ReceiveData>
					if (ch == 'e') {
 8002004:	4b54      	ldr	r3, [pc, #336]	; (8002158 <Bluetooth_Task+0x304>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b65      	cmp	r3, #101	; 0x65
 800200a:	d1cf      	bne.n	8001fac <Bluetooth_Task+0x158>
						MCAL_UART_SendData(USART1, &ch, enable);
 800200c:	2200      	movs	r2, #0
 800200e:	4952      	ldr	r1, [pc, #328]	; (8002158 <Bluetooth_Task+0x304>)
 8002010:	4852      	ldr	r0, [pc, #328]	; (800215c <Bluetooth_Task+0x308>)
 8002012:	f7ff fe4b 	bl	8001cac <MCAL_UART_SendData>
						// Ensure motors stop on exit
						HAL_Motor_Stop(motor_1);
 8002016:	2001      	movs	r0, #1
 8002018:	f7fe fe70 	bl	8000cfc <HAL_Motor_Stop>
						HAL_Motor_Stop(motor_2);
 800201c:	2002      	movs	r0, #2
 800201e:	f7fe fe6d 	bl	8000cfc <HAL_Motor_Stop>
						Delay_Sec(1);
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fcea 	bl	80019fc <Delay_Sec>
						break;
 8002028:	bf00      	nop
			MCAL_UART_ReceiveData(USART1, &ch, disable);
 800202a:	e7a2      	b.n	8001f72 <Bluetooth_Task+0x11e>
					}
				}
			}
		}
	} else if (ch == 'a') {
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <Bluetooth_Task+0x304>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b61      	cmp	r3, #97	; 0x61
 8002032:	d15b      	bne.n	80020ec <Bluetooth_Task+0x298>
		while (1) {
			MCAL_UART_ReceiveData(USART1, &ch, disable);
 8002034:	2201      	movs	r2, #1
 8002036:	4948      	ldr	r1, [pc, #288]	; (8002158 <Bluetooth_Task+0x304>)
 8002038:	4848      	ldr	r0, [pc, #288]	; (800215c <Bluetooth_Task+0x308>)
 800203a:	f7ff fe59 	bl	8001cf0 <MCAL_UART_ReceiveData>

			if (ch == 'f') {
 800203e:	4b46      	ldr	r3, [pc, #280]	; (8002158 <Bluetooth_Task+0x304>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b66      	cmp	r3, #102	; 0x66
 8002044:	d1f6      	bne.n	8002034 <Bluetooth_Task+0x1e0>
				MCAL_UART_SendData(USART1, &ch, enable);
 8002046:	2200      	movs	r2, #0
 8002048:	4943      	ldr	r1, [pc, #268]	; (8002158 <Bluetooth_Task+0x304>)
 800204a:	4844      	ldr	r0, [pc, #272]	; (800215c <Bluetooth_Task+0x308>)
 800204c:	f7ff fe2e 	bl	8001cac <MCAL_UART_SendData>

				// Stop motors
				HAL_Motor_Stop(motor_1);
 8002050:	2001      	movs	r0, #1
 8002052:	f7fe fe53 	bl	8000cfc <HAL_Motor_Stop>
				HAL_Motor_Stop(motor_2);
 8002056:	2002      	movs	r0, #2
 8002058:	f7fe fe50 	bl	8000cfc <HAL_Motor_Stop>
				Delay_Sec(1);
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff fccd 	bl	80019fc <Delay_Sec>

				// Set motors to move forward
				HAL_Motor1_Direction(forward);
 8002062:	2001      	movs	r0, #1
 8002064:	f7fe fe70 	bl	8000d48 <HAL_Motor1_Direction>
				HAL_Motor2_Direction(forward);
 8002068:	2001      	movs	r0, #1
 800206a:	f7fe fe9f 	bl	8000dac <HAL_Motor2_Direction>

				while (1) {
					// Check ultrasonic sensor distance
					d = HAL_Ultrasonic_get_distance();
 800206e:	f7fe ff33 	bl	8000ed8 <HAL_Ultrasonic_get_distance>
 8002072:	4603      	mov	r3, r0
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fda7 	bl	8000bc8 <__aeabi_f2uiz>
 800207a:	4603      	mov	r3, r0
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <Bluetooth_Task+0x314>)
 8002080:	701a      	strb	r2, [r3, #0]
					if (d < 20) {
 8002082:	4b39      	ldr	r3, [pc, #228]	; (8002168 <Bluetooth_Task+0x314>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b13      	cmp	r3, #19
 8002088:	d806      	bhi.n	8002098 <Bluetooth_Task+0x244>
						HAL_Motor_Stop(motor_1);
 800208a:	2001      	movs	r0, #1
 800208c:	f7fe fe36 	bl	8000cfc <HAL_Motor_Stop>
						HAL_Motor_Stop(motor_2);
 8002090:	2002      	movs	r0, #2
 8002092:	f7fe fe33 	bl	8000cfc <HAL_Motor_Stop>
 8002096:	e005      	b.n	80020a4 <Bluetooth_Task+0x250>
					} else {
						HAL_Motor1_Direction(forward);
 8002098:	2001      	movs	r0, #1
 800209a:	f7fe fe55 	bl	8000d48 <HAL_Motor1_Direction>
						HAL_Motor2_Direction(forward);
 800209e:	2001      	movs	r0, #1
 80020a0:	f7fe fe84 	bl	8000dac <HAL_Motor2_Direction>
					}

					// Check light sensor value
					light = HAL_LDR_Output_Value();
 80020a4:	f7fe feee 	bl	8000e84 <HAL_LDR_Output_Value>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <Bluetooth_Task+0x30c>)
 80020ae:	701a      	strb	r2, [r3, #0]
					if (light < Dark)
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, HIGH);
 80020b0:	2201      	movs	r2, #1
 80020b2:	2120      	movs	r1, #32
 80020b4:	482b      	ldr	r0, [pc, #172]	; (8002164 <Bluetooth_Task+0x310>)
 80020b6:	f7ff f9ee 	bl	8001496 <MCAL_GPIO_WritePin>
					else
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, LOW);

					MCAL_UART_ReceiveData(USART1, &ch, disable);
 80020ba:	2201      	movs	r2, #1
 80020bc:	4926      	ldr	r1, [pc, #152]	; (8002158 <Bluetooth_Task+0x304>)
 80020be:	4827      	ldr	r0, [pc, #156]	; (800215c <Bluetooth_Task+0x308>)
 80020c0:	f7ff fe16 	bl	8001cf0 <MCAL_UART_ReceiveData>
					if (ch == 'e') {
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <Bluetooth_Task+0x304>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b65      	cmp	r3, #101	; 0x65
 80020ca:	d1d0      	bne.n	800206e <Bluetooth_Task+0x21a>
						MCAL_UART_SendData(USART1, &ch, enable);
 80020cc:	2200      	movs	r2, #0
 80020ce:	4922      	ldr	r1, [pc, #136]	; (8002158 <Bluetooth_Task+0x304>)
 80020d0:	4822      	ldr	r0, [pc, #136]	; (800215c <Bluetooth_Task+0x308>)
 80020d2:	f7ff fdeb 	bl	8001cac <MCAL_UART_SendData>
						// Ensure motors stop on exit
						HAL_Motor_Stop(motor_1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7fe fe10 	bl	8000cfc <HAL_Motor_Stop>
						HAL_Motor_Stop(motor_2);
 80020dc:	2002      	movs	r0, #2
 80020de:	f7fe fe0d 	bl	8000cfc <HAL_Motor_Stop>
						Delay_Sec(1);
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7ff fc8a 	bl	80019fc <Delay_Sec>
						break;
 80020e8:	bf00      	nop
			MCAL_UART_ReceiveData(USART1, &ch, disable);
 80020ea:	e7a3      	b.n	8002034 <Bluetooth_Task+0x1e0>
					}
				}
			}
		}
	} else if (ch == 'f') {
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <Bluetooth_Task+0x304>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b66      	cmp	r3, #102	; 0x66
 80020f2:	d16e      	bne.n	80021d2 <Bluetooth_Task+0x37e>
		while (1) {
			MCAL_UART_ReceiveData(USART1, &ch, disable);
 80020f4:	2201      	movs	r2, #1
 80020f6:	4918      	ldr	r1, [pc, #96]	; (8002158 <Bluetooth_Task+0x304>)
 80020f8:	4818      	ldr	r0, [pc, #96]	; (800215c <Bluetooth_Task+0x308>)
 80020fa:	f7ff fdf9 	bl	8001cf0 <MCAL_UART_ReceiveData>

			if (ch == 'f') {
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <Bluetooth_Task+0x304>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b66      	cmp	r3, #102	; 0x66
 8002104:	d1f6      	bne.n	80020f4 <Bluetooth_Task+0x2a0>
				MCAL_UART_SendData(USART1, &ch, enable);
 8002106:	2200      	movs	r2, #0
 8002108:	4913      	ldr	r1, [pc, #76]	; (8002158 <Bluetooth_Task+0x304>)
 800210a:	4814      	ldr	r0, [pc, #80]	; (800215c <Bluetooth_Task+0x308>)
 800210c:	f7ff fdce 	bl	8001cac <MCAL_UART_SendData>

				// Stop motors
				HAL_Motor_Stop(motor_1);
 8002110:	2001      	movs	r0, #1
 8002112:	f7fe fdf3 	bl	8000cfc <HAL_Motor_Stop>
				HAL_Motor_Stop(motor_2);
 8002116:	2002      	movs	r0, #2
 8002118:	f7fe fdf0 	bl	8000cfc <HAL_Motor_Stop>
				Delay_Sec(1);
 800211c:	2001      	movs	r0, #1
 800211e:	f7ff fc6d 	bl	80019fc <Delay_Sec>

				// Set motors to move forward
				HAL_Motor1_Direction(forward);
 8002122:	2001      	movs	r0, #1
 8002124:	f7fe fe10 	bl	8000d48 <HAL_Motor1_Direction>
				HAL_Motor2_Direction(forward);
 8002128:	2001      	movs	r0, #1
 800212a:	f7fe fe3f 	bl	8000dac <HAL_Motor2_Direction>

				while (1) {
					// Check ultrasonic sensor distance
					d = HAL_Ultrasonic_get_distance();
 800212e:	f7fe fed3 	bl	8000ed8 <HAL_Ultrasonic_get_distance>
 8002132:	4603      	mov	r3, r0
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fd47 	bl	8000bc8 <__aeabi_f2uiz>
 800213a:	4603      	mov	r3, r0
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <Bluetooth_Task+0x314>)
 8002140:	701a      	strb	r2, [r3, #0]
					if (d < 20) {
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <Bluetooth_Task+0x314>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b13      	cmp	r3, #19
 8002148:	d810      	bhi.n	800216c <Bluetooth_Task+0x318>
						HAL_Motor_Stop(motor_1);
 800214a:	2001      	movs	r0, #1
 800214c:	f7fe fdd6 	bl	8000cfc <HAL_Motor_Stop>
						HAL_Motor_Stop(motor_2);
 8002150:	2002      	movs	r0, #2
 8002152:	f7fe fdd3 	bl	8000cfc <HAL_Motor_Stop>
 8002156:	e018      	b.n	800218a <Bluetooth_Task+0x336>
 8002158:	20000078 	.word	0x20000078
 800215c:	40013800 	.word	0x40013800
 8002160:	20000079 	.word	0x20000079
 8002164:	40010c00 	.word	0x40010c00
 8002168:	2000007a 	.word	0x2000007a
					} else if (d < 50) {
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <Bluetooth_Task+0x384>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b31      	cmp	r3, #49	; 0x31
 8002172:	d802      	bhi.n	800217a <Bluetooth_Task+0x326>
						HAL_Buzzer_ON();
 8002174:	f7fe fd5e 	bl	8000c34 <HAL_Buzzer_ON>
 8002178:	e007      	b.n	800218a <Bluetooth_Task+0x336>
					} else {
						HAL_Motor1_Direction(forward);
 800217a:	2001      	movs	r0, #1
 800217c:	f7fe fde4 	bl	8000d48 <HAL_Motor1_Direction>
						HAL_Motor2_Direction(forward);
 8002180:	2001      	movs	r0, #1
 8002182:	f7fe fe13 	bl	8000dac <HAL_Motor2_Direction>
						HAL_Buzzer_OFF();
 8002186:	f7fe fd61 	bl	8000c4c <HAL_Buzzer_OFF>
					}

					// Check light sensor value
					light = HAL_LDR_Output_Value();
 800218a:	f7fe fe7b 	bl	8000e84 <HAL_LDR_Output_Value>
 800218e:	4603      	mov	r3, r0
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <Bluetooth_Task+0x388>)
 8002194:	701a      	strb	r2, [r3, #0]
					if (light < Dark)
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, HIGH);
 8002196:	2201      	movs	r2, #1
 8002198:	2120      	movs	r1, #32
 800219a:	4811      	ldr	r0, [pc, #68]	; (80021e0 <Bluetooth_Task+0x38c>)
 800219c:	f7ff f97b 	bl	8001496 <MCAL_GPIO_WritePin>
					else
						MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, LOW);

					MCAL_UART_ReceiveData(USART1, &ch, disable);
 80021a0:	2201      	movs	r2, #1
 80021a2:	4910      	ldr	r1, [pc, #64]	; (80021e4 <Bluetooth_Task+0x390>)
 80021a4:	4810      	ldr	r0, [pc, #64]	; (80021e8 <Bluetooth_Task+0x394>)
 80021a6:	f7ff fda3 	bl	8001cf0 <MCAL_UART_ReceiveData>
					if (ch == 'e') {
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <Bluetooth_Task+0x390>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b65      	cmp	r3, #101	; 0x65
 80021b0:	d1bd      	bne.n	800212e <Bluetooth_Task+0x2da>
						MCAL_UART_SendData(USART1, &ch, enable);
 80021b2:	2200      	movs	r2, #0
 80021b4:	490b      	ldr	r1, [pc, #44]	; (80021e4 <Bluetooth_Task+0x390>)
 80021b6:	480c      	ldr	r0, [pc, #48]	; (80021e8 <Bluetooth_Task+0x394>)
 80021b8:	f7ff fd78 	bl	8001cac <MCAL_UART_SendData>
						// Ensure motors stop on exit
						HAL_Motor_Stop(motor_1);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7fe fd9d 	bl	8000cfc <HAL_Motor_Stop>
						HAL_Motor_Stop(motor_2);
 80021c2:	2002      	movs	r0, #2
 80021c4:	f7fe fd9a 	bl	8000cfc <HAL_Motor_Stop>
						Delay_Sec(1);
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7ff fc17 	bl	80019fc <Delay_Sec>
						break;
 80021ce:	bf00      	nop
			MCAL_UART_ReceiveData(USART1, &ch, disable);
 80021d0:	e790      	b.n	80020f4 <Bluetooth_Task+0x2a0>
					}
				}
			}
		}
	}
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000007a 	.word	0x2000007a
 80021dc:	20000079 	.word	0x20000079
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	20000078 	.word	0x20000078
 80021e8:	40013800 	.word	0x40013800

080021ec <main>:

int main(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
	// Enable clock for peripherals
	RCC_GPIOA_CLK_EN();
 80021f2:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <main+0xe4>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a36      	ldr	r2, [pc, #216]	; (80022d0 <main+0xe4>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <main+0xe4>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <main+0xe4>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6193      	str	r3, [r2, #24]
	RCC_TIMER1_CLK_EN();
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <main+0xe4>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <main+0xe4>)
 8002210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002214:	6193      	str	r3, [r2, #24]
	RCC_TIMER2_CLK_EN();
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <main+0xe4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <main+0xe4>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	61d3      	str	r3, [r2, #28]
	RCC_USART1_CLK_EN();
 8002222:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <main+0xe4>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <main+0xe4>)
 8002228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222c:	6193      	str	r3, [r2, #24]
	RCC_AFIO_GPIOE_CLK_EN();
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <main+0xe4>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <main+0xe4>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6193      	str	r3, [r2, #24]
	RCC_ADC1_CLK_EN();
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <main+0xe4>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <main+0xe4>)
 8002240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002244:	6193      	str	r3, [r2, #24]

	// Initialize peripherals
	HAL_Buzzer_Init();
 8002246:	f7fe fcdf 	bl	8000c08 <HAL_Buzzer_Init>
	HAL_LDR_Init();
 800224a:	f7fe fe07 	bl	8000e5c <HAL_LDR_Init>

	TIM1_Init_PWM();
 800224e:	f7ff fbeb 	bl	8001a28 <TIM1_Init_PWM>
	TIM2_Init();
 8002252:	f7ff fb53 	bl	80018fc <TIM2_Init>

	HAL_Motor1_init(Motor_PORT_M1, Motor_PIN1, Motor_PIN2);
 8002256:	2202      	movs	r2, #2
 8002258:	2101      	movs	r1, #1
 800225a:	481e      	ldr	r0, [pc, #120]	; (80022d4 <main+0xe8>)
 800225c:	f7fe fd02 	bl	8000c64 <HAL_Motor1_init>
	HAL_Motor2_init(Motor_PORT_M1, Motor_PIN3, Motor_PIN4);
 8002260:	2210      	movs	r2, #16
 8002262:	2108      	movs	r1, #8
 8002264:	481b      	ldr	r0, [pc, #108]	; (80022d4 <main+0xe8>)
 8002266:	f7fe fd23 	bl	8000cb0 <HAL_Motor2_init>

	// Configure LDR output pin
	GPIO_PinConfig_t led_light;
	led_light.GPIO_PinNumber = GPIO_PIN_5;
 800226a:	2320      	movs	r3, #32
 800226c:	83bb      	strh	r3, [r7, #28]
	led_light.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800226e:	2304      	movs	r3, #4
 8002270:	77bb      	strb	r3, [r7, #30]
	led_light.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8002272:	2301      	movs	r3, #1
 8002274:	77fb      	strb	r3, [r7, #31]
	MCAL_GPIO_Init(GPIOB, &led_light);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4815      	ldr	r0, [pc, #84]	; (80022d4 <main+0xe8>)
 800227e:	f7ff f874 	bl	800136a <MCAL_GPIO_Init>

	// Configure buzzer output pin
	GPIO_PinConfig_t buzzer_pin;
	buzzer_pin.GPIO_PinNumber = GPIO_PIN_6;
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	833b      	strh	r3, [r7, #24]
	buzzer_pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8002286:	2304      	movs	r3, #4
 8002288:	76bb      	strb	r3, [r7, #26]
	buzzer_pin.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800228a:	2301      	movs	r3, #1
 800228c:	76fb      	strb	r3, [r7, #27]
	MCAL_GPIO_Init(GPIOB, &buzzer_pin);
 800228e:	f107 0318 	add.w	r3, r7, #24
 8002292:	4619      	mov	r1, r3
 8002294:	480f      	ldr	r0, [pc, #60]	; (80022d4 <main+0xe8>)
 8002296:	f7ff f868 	bl	800136a <MCAL_GPIO_Init>

	// Configure UART
	UART_Config_t Bluetooth_Config;
	Bluetooth_Config.BaudRate = 9600;
 800229a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800229e:	60bb      	str	r3, [r7, #8]
	Bluetooth_Config.HwFlowCtl = UART_HwFlowCtl_NONE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
	Bluetooth_Config.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80022a4:	2320      	movs	r3, #32
 80022a6:	743b      	strb	r3, [r7, #16]
	Bluetooth_Config.P_IRQ_CallBack = Bluetooth_Task;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <main+0xec>)
 80022aa:	617b      	str	r3, [r7, #20]
	Bluetooth_Config.Parity = UART_Parity__NONE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	737b      	strb	r3, [r7, #13]
	Bluetooth_Config.Payload_Length = UART_Payload_Length_8B;
 80022b0:	2300      	movs	r3, #0
 80022b2:	733b      	strb	r3, [r7, #12]
	Bluetooth_Config.StopBits = UART_StopBits__1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73bb      	strb	r3, [r7, #14]
	Bluetooth_Config.USART_Mode = UART_MODE_TX_RX;
 80022b8:	230c      	movs	r3, #12
 80022ba:	713b      	strb	r3, [r7, #4]

	// Initialize UART
	MCAL_UART_Init(USART1, &Bluetooth_Config);
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	4619      	mov	r1, r3
 80022c0:	4806      	ldr	r0, [pc, #24]	; (80022dc <main+0xf0>)
 80022c2:	f7ff fc2f 	bl	8001b24 <MCAL_UART_Init>
	// Set UART GPIO pins
	MCAL_UART_GPIO_Set_Pins(USART1);
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <main+0xf0>)
 80022c8:	f7ff fd40 	bl	8001d4c <MCAL_UART_GPIO_Set_Pins>

	while (1) {
 80022cc:	e7fe      	b.n	80022cc <main+0xe0>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010c00 	.word	0x40010c00
 80022d8:	08001e55 	.word	0x08001e55
 80022dc:	40013800 	.word	0x40013800

080022e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <LoopForever+0x6>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	; (8002320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <LoopForever+0xe>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	; (800232c <LoopForever+0x16>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800230e:	f000 f811 	bl	8002334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002312:	f7ff ff6b 	bl	80021ec <main>

08002316 <LoopForever>:

LoopForever:
    b LoopForever
 8002316:	e7fe      	b.n	8002316 <LoopForever>
  ldr   r0, =_estack
 8002318:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8002324:	080023b4 	.word	0x080023b4
  ldr r2, =_sbss
 8002328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800232c:	200000c0 	.word	0x200000c0

08002330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC1_2_IRQHandler>
	...

08002334 <__libc_init_array>:
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	2500      	movs	r5, #0
 8002338:	4e0c      	ldr	r6, [pc, #48]	; (800236c <__libc_init_array+0x38>)
 800233a:	4c0d      	ldr	r4, [pc, #52]	; (8002370 <__libc_init_array+0x3c>)
 800233c:	1ba4      	subs	r4, r4, r6
 800233e:	10a4      	asrs	r4, r4, #2
 8002340:	42a5      	cmp	r5, r4
 8002342:	d109      	bne.n	8002358 <__libc_init_array+0x24>
 8002344:	f000 f81a 	bl	800237c <_init>
 8002348:	2500      	movs	r5, #0
 800234a:	4e0a      	ldr	r6, [pc, #40]	; (8002374 <__libc_init_array+0x40>)
 800234c:	4c0a      	ldr	r4, [pc, #40]	; (8002378 <__libc_init_array+0x44>)
 800234e:	1ba4      	subs	r4, r4, r6
 8002350:	10a4      	asrs	r4, r4, #2
 8002352:	42a5      	cmp	r5, r4
 8002354:	d105      	bne.n	8002362 <__libc_init_array+0x2e>
 8002356:	bd70      	pop	{r4, r5, r6, pc}
 8002358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800235c:	4798      	blx	r3
 800235e:	3501      	adds	r5, #1
 8002360:	e7ee      	b.n	8002340 <__libc_init_array+0xc>
 8002362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002366:	4798      	blx	r3
 8002368:	3501      	adds	r5, #1
 800236a:	e7f2      	b.n	8002352 <__libc_init_array+0x1e>
 800236c:	080023ac 	.word	0x080023ac
 8002370:	080023ac 	.word	0x080023ac
 8002374:	080023ac 	.word	0x080023ac
 8002378:	080023b0 	.word	0x080023b0

0800237c <_init>:
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	bf00      	nop
 8002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002382:	bc08      	pop	{r3}
 8002384:	469e      	mov	lr, r3
 8002386:	4770      	bx	lr

08002388 <_fini>:
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	bf00      	nop
 800238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238e:	bc08      	pop	{r3}
 8002390:	469e      	mov	lr, r3
 8002392:	4770      	bx	lr
